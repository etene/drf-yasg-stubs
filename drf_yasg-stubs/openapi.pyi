import collections
from collections import OrderedDict
from typing import Any, Optional

collections_abc = collections
logger: Any
TYPE_OBJECT: str
TYPE_STRING: str
TYPE_NUMBER: str
TYPE_INTEGER: str
TYPE_BOOLEAN: str
TYPE_ARRAY: str
TYPE_FILE: str
FORMAT_DATE: str
FORMAT_DATETIME: str
FORMAT_PASSWORD: str
FORMAT_BINARY: str
FORMAT_BASE64: str
FORMAT_FLOAT: str
FORMAT_DOUBLE: str
FORMAT_INT32: str
FORMAT_INT64: str
FORMAT_EMAIL: str
FORMAT_IPV4: str
FORMAT_IPV6: str
FORMAT_URI: str
FORMAT_UUID: str
FORMAT_SLUG: str
FORMAT_DECIMAL: str
IN_BODY: str
IN_PATH: str
IN_QUERY: str
IN_FORM: str
IN_HEADER: str
SCHEMA_DEFINITIONS: str

def make_swagger_name(attribute_name: Any): ...

class SwaggerDict(OrderedDict):
    _extras__: Any = ...
    def __init__(self, **attrs: Any) -> None: ...
    def __setattr__(self, key: Any, value: Any) -> None: ...
    def __getattr__(self, item: Any): ...
    def __delattr__(self, item: Any) -> None: ...
    def _insert_extras__(self) -> None: ...
    def as_odict(self): ...
    def __reduce__(self): ...

class Contact(SwaggerDict):
    name: Any = ...
    url: Any = ...
    email: Any = ...
    def __init__(
        self, name: Optional[Any] = ..., url: Optional[Any] = ..., email: Optional[Any] = ..., **extra: Any
    ) -> None: ...

class License(SwaggerDict):
    name: Any = ...
    url: Any = ...
    def __init__(self, name: Any, url: Optional[Any] = ..., **extra: Any) -> None: ...

class Info(SwaggerDict):
    title: Any = ...
    description: Any = ...
    terms_of_service: Any = ...
    contact: Any = ...
    license: Any = ...
    def __init__(
        self,
        title: Any,
        default_version: Any,
        description: Optional[Any] = ...,
        terms_of_service: Optional[Any] = ...,
        contact: Optional[Any] = ...,
        license: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...

class Swagger(SwaggerDict):
    swagger: str = ...
    info: Any = ...
    host: Any = ...
    schemes: Any = ...
    base_path: Any = ...
    consumes: Any = ...
    produces: Any = ...
    security_definitions: Any = ...
    security: Any = ...
    paths: Any = ...
    definitions: Any = ...
    def __init__(
        self,
        info: Optional[Any] = ...,
        _url: Optional[Any] = ...,
        _prefix: Optional[Any] = ...,
        _version: Optional[Any] = ...,
        consumes: Optional[Any] = ...,
        produces: Optional[Any] = ...,
        security_definitions: Optional[Any] = ...,
        security: Optional[Any] = ...,
        paths: Optional[Any] = ...,
        definitions: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...
    @classmethod
    def get_base_path(cls, script_prefix: Any, api_prefix: Any): ...

class Paths(SwaggerDict):
    def __init__(self, paths: Any, **extra: Any) -> None: ...

class PathItem(SwaggerDict):
    OPERATION_NAMES: Any = ...
    get: Any = ...
    head: Any = ...
    post: Any = ...
    put: Any = ...
    patch: Any = ...
    delete: Any = ...
    options: Any = ...
    parameters: Any = ...
    def __init__(
        self,
        get: Optional[Any] = ...,
        put: Optional[Any] = ...,
        post: Optional[Any] = ...,
        delete: Optional[Any] = ...,
        options: Optional[Any] = ...,
        head: Optional[Any] = ...,
        patch: Optional[Any] = ...,
        parameters: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...
    @property
    def operations(self): ...

class Operation(SwaggerDict):
    operation_id: Any = ...
    summary: Any = ...
    description: Any = ...
    parameters: Any = ...
    responses: Any = ...
    consumes: Any = ...
    produces: Any = ...
    tags: Any = ...
    security: Any = ...
    def __init__(
        self,
        operation_id: Any,
        responses: Any,
        parameters: Optional[Any] = ...,
        consumes: Optional[Any] = ...,
        produces: Optional[Any] = ...,
        summary: Optional[Any] = ...,
        description: Optional[Any] = ...,
        tags: Optional[Any] = ...,
        security: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...

class Items(SwaggerDict):
    type: Any = ...
    format: Any = ...
    enum: Any = ...
    pattern: Any = ...
    items_: Any = ...
    def __init__(
        self,
        type: Optional[Any] = ...,
        format: Optional[Any] = ...,
        enum: Optional[Any] = ...,
        pattern: Optional[Any] = ...,
        items: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...

class Parameter(SwaggerDict):
    name: Any = ...
    in_: Any = ...
    description: Any = ...
    required: Any = ...
    schema: Any = ...
    type: Any = ...
    format: Any = ...
    enum: Any = ...
    pattern: Any = ...
    items_: Any = ...
    default: Any = ...
    def __init__(
        self,
        name: Any,
        in_: Any,
        description: Optional[Any] = ...,
        required: Optional[Any] = ...,
        schema: Optional[Any] = ...,
        type: Optional[Any] = ...,
        format: Optional[Any] = ...,
        enum: Optional[Any] = ...,
        pattern: Optional[Any] = ...,
        items: Optional[Any] = ...,
        default: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...

class Schema(SwaggerDict):
    OR_REF: Any = ...
    title: Any = ...
    description: Any = ...
    required: Any = ...
    type: Any = ...
    properties: Any = ...
    additional_properties: Any = ...
    format: Any = ...
    enum: Any = ...
    pattern: Any = ...
    items_: Any = ...
    read_only: Any = ...
    default: Any = ...
    def __init__(
        self,
        title: Optional[Any] = ...,
        description: Optional[Any] = ...,
        type: Optional[Any] = ...,
        format: Optional[Any] = ...,
        enum: Optional[Any] = ...,
        pattern: Optional[Any] = ...,
        properties: Optional[Any] = ...,
        additional_properties: Optional[Any] = ...,
        required: Optional[Any] = ...,
        items: Optional[Any] = ...,
        default: Optional[Any] = ...,
        read_only: Optional[Any] = ...,
        **extra: Any
    ) -> None: ...

class _Ref(SwaggerDict):
    ref_name_re: Any = ...
    ref: Any = ...
    def __init__(
        self, resolver: Any, name: Any, scope: Any, expected_type: Any, ignore_unresolved: bool = ...
    ) -> None: ...
    def resolve(self, resolver: Any): ...
    def __setitem__(self, key: Any, value: Any): ...
    def __delitem__(self, key: Any) -> None: ...

class SchemaRef(_Ref):
    def __init__(self, resolver: Any, schema_name: Any, ignore_unresolved: bool = ...) -> None: ...

def resolve_ref(ref_or_obj: Any, resolver: Any): ...

class Responses(SwaggerDict):
    default: Any = ...
    def __init__(self, responses: Any, default: Optional[Any] = ..., **extra: Any) -> None: ...

class Response(SwaggerDict):
    description: Any = ...
    schema: Any = ...
    examples: Any = ...
    def __init__(
        self, description: Any, schema: Optional[Any] = ..., examples: Optional[Any] = ..., **extra: Any
    ) -> None: ...

class ReferenceResolver:
    def __init__(self, *scopes: Any, **kwargs: Any) -> None: ...
    def with_scope(self, scope: Any): ...
    def set(self, name: Any, obj: Any, scope: Optional[Any] = ...) -> None: ...
    def setdefault(self, name: Any, maker: Any, scope: Optional[Any] = ...): ...
    def get(self, name: Any, scope: Optional[Any] = ...): ...
    def getdefault(self, name: Any, default: Optional[Any] = ..., scope: Optional[Any] = ...): ...
    def has(self, name: Any, scope: Optional[Any] = ...): ...
    def __iter__(self) -> Any: ...
    @property
    def scopes(self): ...
    def keys(self): ...
    def __getitem__(self, item: Any): ...
