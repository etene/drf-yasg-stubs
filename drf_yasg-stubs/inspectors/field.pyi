from typing import Any, Optional

from .base import FieldInspector, SerializerInspector

class InlineSerializerInspector(SerializerInspector):
    use_definitions: bool = ...
    def get_schema(self, serializer: Any): ...
    def add_manual_parameters(self, serializer: Any, parameters: Any): ...
    def get_request_parameters(self, serializer: Any, in_: Any): ...
    def get_property_name(self, field_name: Any): ...
    def get_parameter_name(self, field_name: Any): ...
    def get_serializer_ref_name(self, serializer: Any): ...
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class ReferencingSerializerInspector(InlineSerializerInspector):
    use_definitions: bool = ...

def get_queryset_field(queryset: Any, field_name: Any): ...
def get_model_field(model: Any, field_name: Any): ...
def get_queryset_from_view(view: Any, serializer: Optional[Any] = ...): ...
def get_parent_serializer(field: Any): ...
def get_related_model(model: Any, source: Any): ...

class RelatedFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

def find_regex(regex_field: Any): ...

numeric_fields: Any
limit_validators: Any

def find_limits(field: Any): ...
def decimal_field_type(field: Any): ...

model_field_to_basic_type: Any
ip_format: Any
serializer_field_to_basic_type: Any
basic_type_info: Any

def get_basic_type_info(field: Any): ...
def decimal_return_type(): ...
def get_origin_type(hint_class: Any): ...
def hint_class_issubclass(hint_class: Any, check_class: Any): ...

hinting_type_info: Any

def inspect_collection_hint_class(hint_class: Any): ...
def get_basic_type_info_from_hint(hint_class: Any): ...

class SerializerMethodFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class SimpleFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class ChoiceFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class FileFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class DictFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class HiddenFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class JSONFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class StringDefaultFieldInspector(FieldInspector):
    def field_to_swagger_object(self, field: Any, swagger_object_type: Any, use_references: Any, **kwargs: Any): ...

class CamelCaseJSONFilter(FieldInspector):
    def camelize_string(self, s: Any): ...
    def camelize_schema(self, schema: Any) -> None: ...
    def process_result(self, result: Any, method_name: Any, obj: Any, **kwargs: Any): ...
    def is_camel_case(self): ...

class RecursiveFieldInspector(FieldInspector): ...
